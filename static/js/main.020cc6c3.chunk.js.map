{"version":3,"sources":["components/subscribe/index.tsx","components/publish/index.tsx","components/player/index.tsx","App.tsx","constants.ts","index.tsx"],"names":["Subscribe","props","Splayer","useRef","useState","streamId","subscribeId","setsubscribeId","useEffect","onClick","a","stream","cloudClient","create","API_OPERATION","SUBSCRIBE","client","on","bitRate","kind","console","log","state","subscribe","mediaStream","current","srcObject","ref","muted","autoPlay","playsInline","Publish","streamID","setStreamID","length","Math","random","toString","substr","kinds","simulcast","Utils","getUserMedia","video","includes","audio","PUBLISH","publish","PlayerComponent","player","process","REACT_APP_DB_TOKEN_EXAMPLE","REACT_APP_DB_CLIENT_EXAMPLE","CloudClient","initmediaDevicesStream","navigator","mediaDevices","mediaDevicesStream","App","ready","setReady","then","className","ReactDOM","render","StrictMode","document","getElementById","require","config"],"mappings":"mPAQaA,EAAY,SAACC,GACtB,IAAMC,EAAUC,iBAAyB,MADD,EAEFC,mBAASH,EAAMI,UAFb,mBAEjCC,EAFiC,KAEpBC,EAFoB,KAIxCC,qBAAU,WACRD,EAAeN,EAAMI,YACpB,CAACJ,IAqBF,OACI,qCACE,wBAAQQ,QArBK,WACjB,sBAAC,gCAAAC,EAAA,6DACSC,EAASL,EADlB,SAGwBM,EAAYC,OAAOC,gBAAcC,UAAUJ,EAAO,IAH1E,cAGSK,EAHT,QAIUC,GAAG,WAAU,YAAmB,IAAjBC,EAAgB,EAAhBA,QAAQC,EAAQ,EAARA,KAC1BC,QAAQC,IAAR,wCAA6CF,EAA7C,qBAA8DD,OAC/DD,GAAG,yBAAwB,YAAY,IAAVK,EAAS,EAATA,MAC1BF,QAAQC,IAAR,gDAAqDC,OAP9D,SAS4BN,EAAOO,YATnC,OASSC,EATT,OAWOtB,EAAQuB,SAAWD,IACnBtB,EAAQuB,QAAQC,UAAYF,GAZnC,0CAAD,IAoBI,uBACA,uBAAOG,IAAKzB,EAAS0B,OAAK,EAACC,UAAQ,EAACC,aAAW,QChC9CC,EAAU,WAAO,IAAD,EACO3B,mBAAiB,IADxB,mBAClB4B,EADkB,KACRC,EADQ,KA0BvB,OACI,mCAEuB,IAApBD,EAASE,OACL,8CAAgB,cAAC,EAAD,CAAW7B,SAAU2B,OACrC,iCACG,wBAAQvB,QA7BJ,WAClB,sBAAC,kCAAAC,EAAA,6DACOC,EAAOwB,KAAKC,SAASC,SAAS,IAAIC,OAAO,GACzCC,EAAM,CAAC,QAAQ,UACD,EACdC,GAAU,EAJjB,SAKyBC,QAAMC,aAAa,CACvCC,MAAMJ,EAAMK,SAAS,SACrBC,MAAMN,EAAMK,SAAS,UAJL,OAHrB,cAKOpB,EALP,gBASsBZ,EAAYC,OAAOC,gBAAcgC,QAAQnC,EAAO,CAEjE6B,cAXL,cAaQvB,GAAG,WAAU,YAAmB,IAAjBC,EAAgB,EAAhBA,QAAQC,EAAQ,EAARA,KAC1BC,QAAQC,IAAR,sCAA2CF,EAA3C,qBAA4DD,OAC7DD,GAAG,yBAAwB,YAAY,IAAVK,EAAS,EAATA,MAC5BF,QAAQC,IAAR,gDAAqDC,OACtDyB,QAAQvB,GACXS,EAAYtB,GAlBb,2CAAD,IA4Bc,qBACA,mECjCLqC,EAAkB,SAAC,GAAwB,IAAtBrC,EAAqB,EAArBA,OAC1BsC,EAAS9C,iBAAyB,MAUxC,OAPAK,qBAAU,WACJyC,EAAOxB,SAAWd,IACpBsC,EAAOxB,QAAQC,UAAYf,KAG5B,CAACA,IAGF,uBAAOgB,IAAKsB,EAAQrB,OAAK,EAACC,UAAQ,EAACC,aAAW,KCTvClB,GCLUsC,qaAAYC,2BACXD,qaAAYE,4B,ODIT,IAAIC,cCRTH,qCADDA,4MDWfI,EAAsB,uCAAG,4BAAA5C,EAAA,sEACI6C,UAAUC,aAAad,aACtD,CAACC,OAAO,EAAME,OAAO,IAFM,cACvBY,EADuB,yBAItBA,GAJsB,2CAAH,qDA2BbC,MApBf,WAAgB,IAAD,EACatD,mBAA6B,MAD1C,mBACNuD,EADM,KACCC,EADD,KASb,OANApD,qBAAU,WACR8C,IAAyBO,MAAK,SAASlD,GACrC,OAAOiD,EAASjD,QAElB,IAGA,sBAAKmD,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,2CAEF,cAAC,EAAD,CAAiBnD,OAAQgD,IACzB,cAAC,EAAD,QE5BNI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BC,EAAQ,KAAUC,U","file":"static/js/main.020cc6c3.chunk.js","sourcesContent":["import { API_OPERATION } from 'avcore';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { cloudClient} from '../../App';\r\n\r\ninterface Iprops {\r\n    streamId: string;\r\n  }\r\n\r\nexport const Subscribe = (props: Iprops) => {\r\n    const Splayer = useRef<HTMLVideoElement>(null);\r\n    const [subscribeId, setsubscribeId] = useState(props.streamId)\r\n    \r\n    useEffect(() => {\r\n      setsubscribeId(props.streamId)\r\n    }, [props]);\r\n\r\n    const API_Subcribe = () => {\r\n        (async function () {\r\n            const stream = subscribeId;\r\n            // const kinds=['audio','video'] //can be also ['audio'] or ['video'] only;\r\n            const client = await cloudClient.create(API_OPERATION.SUBSCRIBE,stream,{});\r\n            client.on('bitRate',({bitRate,kind})=>{\r\n                console.log(`current subscribe bitrate for ${kind} track is ${bitRate}`)\r\n            }).on('connectionstatechange',({state})=>{\r\n                  console.log(`current transport connection state is ${state}`)\r\n            })\r\n            const mediaStream= await client.subscribe();\r\n                        \r\n            if (Splayer.current && mediaStream) {\r\n                Splayer.current.srcObject = mediaStream;\r\n              }\r\n            // startPlaying();\r\n        })()\r\n    }\r\n    \r\n      return (\r\n          <>\r\n            <button onClick={API_Subcribe}>Subscribe</button>\r\n            <video ref={Splayer} muted autoPlay playsInline />\r\n          </>\r\n      )\r\n}","import { API_OPERATION } from 'avcore';\r\nimport { Utils} from 'avcore/client';\r\nimport { useState } from 'react';\r\nimport { cloudClient } from '../../App';\r\nimport { Subscribe } from '../subscribe';\r\n\r\nexport const Publish = () => {\r\n    const [streamID, setStreamID] = useState<string>('');\r\n\r\n    const API_Publish = () => {\r\n      (async function () {\r\n        const stream=Math.random().toString(36).substr(2) //some random string;\r\n        const kinds=['audio','video'] //can be also ['audio'] or ['video'] only;\r\n        const isScreenShare=false; //set true for screen share stream\r\n        const simulcast=!isScreenShare; //google chrome has many issues for screen share simulcast\r\n        const mediaStream=await Utils.getUserMedia({\r\n            video:kinds.includes('video'),\r\n            audio:kinds.includes('audio')\r\n        },isScreenShare); //you can receive any stream from navigator.mediaDevices directly w/o our utils\r\n        const client = await cloudClient.create(API_OPERATION.PUBLISH,stream,{\r\n            \r\n            simulcast\r\n        });\r\n        client.on('bitRate',({bitRate,kind})=>{\r\n            console.log(`current publish bitrate for ${kind} track is ${bitRate}`)\r\n        }).on('connectionstatechange',({state})=>{\r\n            console.log(`current transport connection state is ${state}`)\r\n        }).publish(mediaStream);\r\n        setStreamID(stream);\r\n    })()\r\n    }\r\n\r\n      return (\r\n          <>\r\n           \r\n            {streamID.length !== 0 \r\n               ? <span>Published <Subscribe streamId={streamID}/></span>\r\n               : <span>\r\n                    <button onClick={API_Publish}>Publish</button>\r\n                    <strong> Please Publish stream </strong>\r\n                 </span>\r\n            }\r\n          </>\r\n      )\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\ninterface IProps {\r\n    stream: MediaStream | null;\r\n  }\r\n  \r\n  export const PlayerComponent = ({ stream }: IProps) => {\r\n    const player = useRef<HTMLVideoElement>(null);\r\n    \r\n  \r\n    useEffect(() => {\r\n      if (player.current && stream) {\r\n        player.current.srcObject = stream;\r\n      }\r\n      \r\n    }, [stream]);\r\n  \r\n    return (\r\n      <video ref={player} muted autoPlay playsInline />\r\n    );\r\n  };\r\n  ","import React, { useEffect, useState } from 'react';\nimport { CloudClient } from 'avcore/client';\nimport  {Publish}  from './components/publish';\nimport {PlayerComponent} from './components/player';\nimport { token, client, tokenEx, clientEx } from './constants'\n\nimport './App.css';\n\nexport const clientToken = token;\nexport const cloudClient = new CloudClient(client, clientToken);\n\nconst initmediaDevicesStream = async () => {\n  const mediaDevicesStream = await navigator.mediaDevices.getUserMedia(\n    {video: true, audio: true}\n  )\n  return mediaDevicesStream\n}\n\nfunction App() {\n  const [ready, setReady] = useState<MediaStream | null>(null);\n\n  useEffect(() => {\n    initmediaDevicesStream().then(function(stream) {\n      return setReady(stream)\n    })\n  },[])\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Training</p>\n      </header>\n      <PlayerComponent stream={ready} />\n      <Publish />\n    </div>\n  );\n}\n\nexport default App;\n","export const token = process.env.REACT_APP_DB_TOKEN as string;\r\nexport const client = process.env.REACT_APP_DB_CLIENT as string;\r\n\r\n\r\nexport const tokenEx = process.env.REACT_APP_DB_TOKEN_EXAMPLE as string;\r\nexport const clientEx = process.env.REACT_APP_DB_CLIENT_EXAMPLE as string;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nrequire('dotenv').config()\n"],"sourceRoot":""}